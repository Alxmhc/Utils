class AES
{
	static const uint8_t Rcon[12];
	static const uint8_t Sbox[256];

	std::vector<uint8_t> enc;

	static void Xor(const uint8_t k[16], uint8_t r[16])
	{
		for(int i = 0; i < 16; i++)
		{
			r[i] ^= k[i];
		}
	}

	static void SubShift(uint8_t r[16])
	{
		uint8_t t[16];

		t[0]  = Sbox[r[0]];
		t[4]  = Sbox[r[4]];
		t[8]  = Sbox[r[8]];
		t[12] = Sbox[r[12]];

		t[1]  = Sbox[r[5]];
		t[5]  = Sbox[r[9]];
		t[9]  = Sbox[r[13]];
		t[13] = Sbox[r[1]];

		t[2]  = Sbox[r[10]];
		t[6]  = Sbox[r[14]];
		t[10] = Sbox[r[2]];
		t[14] = Sbox[r[6]];

		t[3]  = Sbox[r[15]];
		t[7]  = Sbox[r[3]];
		t[11] = Sbox[r[7]];
		t[15] = Sbox[r[11]];

		memcpy(r, t, 16);
	}

	static uint8_t mul(uint8_t a)
	{
		uint8_t r = a << 1;
		if((a & 0x80) != 0)
		{
			r ^= 0x1b;
		}
		return r;
	}

	static void Mix(uint8_t r[16])
	{
		uint8_t d[16];
		for(int i = 0; i < 16; i++)
		{
			d[i] = mul(r[i]);
		}

		uint8_t t = r[0] ^ r[1] ^ r[2] ^ r[3];
		r[0]  ^= t ^ d[0]  ^ d[1];
		r[1]  ^= t ^ d[1]  ^ d[2];
		r[2]  ^= t ^ d[2]  ^ d[3];
		r[3]  ^= t ^ d[0]  ^ d[3];

		t = r[4] ^ r[5] ^ r[6] ^ r[7];
		r[4]  ^= t ^ d[4]  ^ d[5];
		r[5]  ^= t ^ d[5]  ^ d[6];
		r[6]  ^= t ^ d[6]  ^ d[7];
		r[7]  ^= t ^ d[4]  ^ d[7];

		t = r[8] ^ r[9] ^ r[10] ^ r[11];
		r[8]  ^= t ^ d[8]  ^ d[9];
		r[9]  ^= t ^ d[9]  ^ d[10];
		r[10] ^= t ^ d[10] ^ d[11];
		r[11] ^= t ^ d[8]  ^ d[11];

		t = r[12] ^ r[13] ^ r[14] ^ r[15];
		r[12] ^= t ^ d[12] ^ d[13];
		r[13] ^= t ^ d[13] ^ d[14];
		r[14] ^= t ^ d[14] ^ d[15];
		r[15] ^= t ^ d[12] ^ d[15];
	}

public:
	AES(const uint8_t *k, size_t ksz) : enc((ksz + 28) << 2)
	{
		std::copy_n(k, ksz, enc.begin());
		for(size_t i = ksz; i < enc.size(); i += 4)
		{
			uint8_t t[4];
			memcpy(t, enc.data() + i - 4, 4);
			const size_t o = i % ksz;
			if(o == 0)
			{
				uint8_t x = t[0];
				t[0] = Sbox[t[1]] ^ Rcon[i/ksz];
				t[1] = Sbox[t[2]];
				t[2] = Sbox[t[3]];
				t[3] = Sbox[x];
			}
			else if((ksz > 24) && (o == 16))
			{
				t[0] = Sbox[t[0]];
				t[1] = Sbox[t[1]];
				t[2] = Sbox[t[2]];
				t[3] = Sbox[t[3]];
			}
			enc[i]   = t[0] ^ enc[i-ksz];
			enc[i+1] = t[1] ^ enc[i+1-ksz];
			enc[i+2] = t[2] ^ enc[i+2-ksz];
			enc[i+3] = t[3] ^ enc[i+3-ksz];
		}
	}

	void Encrypt(uint8_t r[16]) const
	{
		Xor(enc.data(), r);
		size_t i = 16;
		for(; i < enc.size() - 16; i += 16)
		{
			SubShift(r);
			Mix(r);
			Xor(enc.data() + i, r);
		}
		SubShift(r);
		Xor(enc.data() + i, r);
	}
};

const uint8_t AES::Sbox[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

const uint8_t AES::Rcon[12] = {
	0x00, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40,
	0x80, 0x1b, 0x36, 0x6c
};

//================================================

void incrBE(uint8_t *v, size_t sz)
{
	size_t i = sz;
	for(;;)
	{
		i--;
		v[i]++;
		if(v[i] != 0 || i == 0)
			break;
	}
}
void incrLE(uint8_t *v, size_t sz)
{
	for(size_t i = 0; i < sz; i++)
	{
		v[i]++;
		if(v[i] != 0)
			break;
	}
}

void AESCTREncrypt(const uint8_t *key, size_t ksz, std::vector<uint8_t> &data, void incr(uint8_t*, size_t))
{
	AES enc(key, ksz);

	uint8_t tmp[16];
	uint8_t iv[16] = {};

	size_t offset = 0;
	while(offset < data.size() - 16)
	{
		incr(iv, 16);
		memcpy(tmp, iv, 16);
		enc.Encrypt(tmp);
		for(uint_fast8_t i = 0; i < 16; i++)
		{
			data[i+offset] ^= tmp[i];
		}
		offset += 16;
	}
	size_t o = data.size() - offset;
	if(o != 0)
	{
		incr(iv, 16);
		memcpy(tmp, iv, 16);
		enc.Encrypt(tmp);
		for(uint_fast8_t i = 0; i < o; i++)
		{
			data[i+offset] ^= tmp[i];
		}
	}
}

void AESCTRDecryptLE(const uint8_t *key, size_t ksz, std::vector<uint8_t> &data)
{
	AESCTREncrypt(key, ksz, data, incrLE);
}

void AESCTRDecryptBE(const uint8_t *key, size_t ksz, std::vector<uint8_t> &data)
{
	AESCTREncrypt(key, ksz, data, incrBE);
}
